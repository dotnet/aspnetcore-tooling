#
# See https://docs.microsoft.com/azure/devops/pipelines/yaml-schema for reference.
#

variables:
- name: Build.Repository.Clean
  value: true
- name: _TeamName
  value: AspNetCore
- name: DOTNET_SKIP_FIRST_TIME_EXPERIENCE
  value: true
- name: _DotNetPublishToBlobFeed
  value: false
- name: _PublishBlobFeedUrl
  value: https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json
- name: _PublishArgs
  value: '/p:PublishToSymbolServer=false /p:PublishToAzure=false'
- name: _HelixRepo
  value: aspnet/AspNetCore-Tooling

# Variables for public PR builds
- ${{ if or(eq(variables['System.TeamProject'], 'public'), in(variables['Build.Reason'], 'PullRequest'), contains(variables['Build.DefinitionName'], 'github')) }}:
  # These are needed to suppress a warning in the cibuild invocation since AzDO leaves the `$(_SignArgs)` in place and it fails to resolve.
  - name: _SignArgs
    value: ''
  - name: _OfficialBuildIdArgs
    value: ''

# Variables for internal Official builds
- ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), contains(variables['Build.DefinitionName'], 'official')) }}:
  - name: _SignType
    value: real
  - name: _SignArgs
    value: /p:DotNetSignType=$(_SignType) /p:TeamName=$(_TeamName)
  - name: _OfficialBuildIdArgs
    value: /p:OfficialBuildId=$(Build.BuildNumber)
      /p:ManifestBuildBranch=$(Build.SourceBranchName)
      /p:ManifestBuildNumber=$(Build.BuildNumber)

resources:
  containers:
  - container: LinuxContainer
    image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-14.04-cross-0cd4667-20170319080304
    options: --init # This ensures all the stray defunct processes are reaped.

trigger:
- master
- release/*

pr:
- "*"

# Three phases for each of the three OSes we want to run on
jobs:
- template: /eng/common/templates/jobs/jobs.yml
  parameters:
    timeoutInMinutes: 120
    enablePublishBuildArtifacts: true # publishes artifacts/log files
    enablePublishTestResults: true
    helixRepo: $(_HelixRepo)
    enableTelemetry: true
    # enableMicrobuild can't be read from a user-defined variable (Azure DevOps limitation)
    ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
      enableMicrobuild: true
    jobs:
    - job: Windows
      pool:
        ${{ if eq(variables['System.TeamProject'], 'public') }}:
          name: NetCorePublic-Pool
          queue: BuildPool.Windows.10.Amd64.VS2019.Open
        ${{ if ne(variables['System.TeamProject'], 'public') }}:
          name: NetCoreInternal-Pool
          queue: BuildPool.Windows.10.Amd64.VS2019
      strategy:
        matrix:
          debug:
            _BuildConfig: Debug
          release:
            _BuildConfig: Release
            ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest')) }}:
              _DotNetPublishToBlobFeed: true
              _PublishArgs: /p:PublishToSymbolServer=true
                /p:DotNetSymbolServerTokenMsdl=$(microsoft-symbol-server-pat)
                /p:DotNetSymbolServerTokenSymWeb=$(symweb-symbol-server-pat)
                /p:PublishToAzure=true
                /p:DotNetPublishBlobFeedKey=$(dotnetfeed-storage-access-key-1)
                /p:DotNetPublishBlobFeedUrl=$(_PublishBlobFeedUrl)
                /p:DotNetPublishToBlobFeed=$(_DotNetPublishToBlobFeed)
      steps:
      - ${{ if and(ne(variables['System.TeamProject'], 'public'), notin(variables['Build.Reason'], 'PullRequest'), contains(variables['Build.DefinitionName'], 'official')) }}:
        - task: AzureKeyVault@1
          inputs:
            azureSubscription: 'DotNet-Engineering-Services_KeyVault'
            KeyVaultName: EngKeyVault
            SecretsFilter: 'dotnetfeed-storage-access-key-1,microsoft-symbol-server-pat,symweb-symbol-server-pat'
      - script: eng\common\cibuild.cmd
          -configuration $(_BuildConfig)
          -prepareMachine
          $(_SignArgs)
          $(_OfficialBuildIdArgs)
          $(_PublishArgs)
        name: Build
        displayName: Build
        condition: succeeded()
      - task: PublishBuildArtifacts@1
        displayName: Publish VSIX Artifacts
        inputs:
          PathtoPublish: '$(Build.SourcesDirectory)/artifacts/VSSetup/$(_BuildConfig)'
          PublishLocation: Container
          ArtifactName: VSIX_$(Agent.Os)_$(_BuildConfig)
        continueOnError: true
        condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false), eq(variables['_BuildConfig'], 'Release'))
      - task: PublishBuildArtifacts@1
        displayName: Publish VS for Mac Artifacts
        inputs:
          PathtoPublish: '$(Build.SourcesDirectory)/artifacts/MPack/$(_BuildConfig)'
          PublishLocation: Container
          ArtifactName: MPack_$(Agent.Os)_$(_BuildConfig)
        continueOnError: true
        condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false), eq(variables['_BuildConfig'], 'Release'))
      - task: PublishBuildArtifacts@1
        displayName: Publish package artifacts
        inputs:
          PathtoPublish: $(Build.SourcesDirectory)/artifacts/packages/$(_BuildConfig)
          PublishLocation: Container
          ArtifactName: Packages_$(Agent.Os)_$(_BuildConfig)
        continueOnError: true
        condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false), eq(variables['_BuildConfig'], 'Release'))

    - job: macOS
      pool:
        vmImage: macOS-10.13
      strategy:
        matrix:
          debug:
            _BuildConfig: Debug
          release:
            _BuildConfig: Release
      steps:
      - script: eng/common/cibuild.sh
          --configuration $(_BuildConfig)
          --prepareMachine
        name: Build
        displayName: Build
        condition: succeeded()

    - job: Linux
      container: LinuxContainer
      pool:
        vmImage: ubuntu-16.04
      strategy:
        matrix:
          debug:
            _BuildConfig: Debug
          release:
            _BuildConfig: Release
      steps:
      - script: eng/common/cibuild.sh
          --configuration $(_BuildConfig)
          --prepareMachine
        name: Build
        displayName: Build
        condition: succeeded()
