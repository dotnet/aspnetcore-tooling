{
  "name": "ASP.NET Razor",
  "scopeName": "text.aspnetcorerazor",
  "patterns": [
    {
      "include": "#razor-control-structures"
    },
    {
      "include": "text.html.basic"
    }
  ],
  "repository": {
    "razor-control-structures": {
      "patterns": [
        {
          "include": "#razor-codeblock"
        },
        {
          "include": "#explicit-razor-expression"
        },
        {
          "include": "#escaped-transition"
        },
        {
          "include": "#directives"
        },
        {
          "include": "#implicit-expression"
        }
      ]
    },
    "escaped-transition": {
      "name": "constant.character.escape.razor.transition",
      "match": "@@"
    },
    "transition": {
      "match": "@",
      "name": "keyword.control.cshtml.transition"
    },
    "razor-codeblock": {
      "begin": "(@)(\\{)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#transition"
            }
          ]
        },
        "2": {
          "name": "keyword.control.razor.directive.codeblock.open"
        }
      },
      "patterns": [
        {
          "include": "#razor-csharp-statement"
        }
      ],
      "end": "(\\})",
      "endCaptures": {
        "1": {
          "name": "keyword.control.razor.directive.codeblock.close"
        }
      }
    },
    "razor-csharp-statement": {
      "patterns": [
        {
          "include": "#text-tag"
        },
        {
          "include": "#wellformed-html"
        },
        {
          "include": "#razor-single-line-markup"
        },
        {
          "include": "#razor-control-structures"
        },
        {
          "include": "source.cs"
        }
      ]
    },
    "razor-single-line-markup": {
      "match": "(\\@\\:)([^$]*)$",
      "captures": {
        "1": {
          "name": "keyword.control.razor.singleLineMarkup"
        },
        "2": {
          "patterns": [
            {
              "include": "#razor-control-structures"
            },
            {
              "include": "text.html.basic"
            }
          ]
        }
      }
    },
    "text-tag": {
      "begin": "(<text\\s*>)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.cshtml.transition.textTag.open"
        }
      },
      "patterns": [
        {
          "include": "#balanced-open-close-tag-body"
        },
        {
          "include": "#wellformed-html"
        }
      ],
      "end": "(</text>)",
      "endCaptures": {
        "1": {
          "name": "keyword.control.cshtml.transition.textTag.close"
        }
      }
    },
    "wellformed-html": {
      "patterns": [
        {
          "include": "#void-tag"
        },
        {
          "include": "#balanced-open-close-tag"
        }
      ]
    },
    "void-tag": {
      "name": "meta.tag.structure.$3.void.html",
      "begin": "(?i)(<)(!?)(area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)(?=\\s|/?>)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "constant.character.escape.razor.tagHelperOptOut"
        },
        "3": {
          "name": "entity.name.tag.html"
        }
      },
      "patterns": [
        {
          "include": "text.html.basic#attribute"
        }
      ],
      "end": "/?>",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.tag.end.html"
        }
      }
    },
    "balanced-open-close-tag": {
      "begin": "(?=<([^/\\s>]+))",
      "patterns": [
        {
          "include": "#balanced-open-close-tag-start"
        },
        {
          "include": "#balanced-open-close-tag-end"
        },
        {
          "include": "#balanced-open-close-tag-body"
        }
      ],
      "end": "(?<=(</\\1>))|(/>)"
    },
    "balanced-open-close-tag-start": {
      "begin": "(<)(?!(/))([^/\\s>]+)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "constant.character.escape.razor.tagHelperOptOut"
        },
        "3": {
          "name": "entity.name.tag.html"
        }
      },
      "patterns": [
        {
          "include": "#balanced-open-close-tag-attributes"
        }
      ],
      "end": "/?>",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.tag.end.html"
        }
      }
    },
    "balanced-open-close-tag-attributes": {
      "begin": "(?=\\s)",
      "patterns": [
        {
          "include": "#razor-control-structures"
        },
        {
          "include": "text.html.basic#attribute"
        }
      ],
      "end": "(?=/?>)"
    },
    "balanced-open-close-tag-body": {
      "begin": "(?<=([^/])>)",
      "patterns": [
        {
          "include": "#wellformed-html"
        },
        {
          "include": "$self"
        }
      ],
      "end": "(?=\\</)"
    },
    "balanced-open-close-tag-end": {
      "match": "(</)(!?)([^/\\s>]+)\\s*(>)",
      "captures": {
        "1": {
          "name": "punctuation.definition.tag.begin.html"
        },
        "2": {
          "name": "constant.character.escape.razor.tagHelperOptOut"
        },
        "3": {
          "name": "entity.name.tag.html"
        },
        "4": {
          "name": "punctuation.definition.tag.end.html"
        }
      }
    },
    "explicit-razor-expression": {
      "name": "meta.expression.explicit.cshtml",
      "begin": "(@)\\(",
      "beginCaptures": {
        "0": {
          "name": "keyword.control.cshtml"
        },
        "1": {
          "patterns": [
            {
              "include": "#transition"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "source.cs#expression"
        }
      ],
      "end": "\\)",
      "endCaptures": {
        "0": {
          "name": "keyword.control.cshtml"
        }
      }
    },
    "implicit-expression": {
      "name": "meta.expression.implicit.cshtml",
      "begin": "(@)",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#transition"
            }
          ]
        }
      },
      "patterns": [
        {
          "include": "#await-prefix"
        },
        {
          "include": "#implicit-expression-body"
        }
      ],
      "end": "(?=[\\s<>\\{\\}\\)\\]])"
    },
    "implicit-expression-body": {
      "patterns": [
        {
          "include": "#implicit-expression-invocation-start"
        },
        {
          "include": "#implicit-expression-accessor-start"
        }
      ],
      "end": "(?=[\\s<>\\{\\}\\)\\]])"
    },
    "implicit-expression-invocation-start": {
      "begin": "([_[:alpha:]][_[:alnum:]]*)(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "entity.name.function.cs"
        }
      },
      "patterns": [
        {
          "include": "#implicit-expression-continuation"
        }
      ],
      "end": "(?=[\\s<>\\{\\}\\)\\]])"
    },
    "implicit-expression-accessor-start": {
      "begin": "([_[:alpha:]][_[:alnum:]]*)",
      "beginCaptures": {
        "1": {
          "name": "variable.other.object.cs"
        }
      },
      "patterns": [
        {
          "include": "#implicit-expression-continuation"
        }
      ],
      "end": "(?=[\\s<>\\{\\}\\)\\]])"
    },
    "implicit-expression-continuation": {
      "patterns": [
        {
          "include": "#balanced-parenthesis-csharp"
        },
        {
          "include": "#balanced-brackets-csharp"
        },
        {
          "include": "#implicit-expression-invocation"
        },
        {
          "include": "#implicit-expression-accessor"
        },
        {
          "include": "#implicit-expression-extension"
        }
      ],
      "end": "(?=[\\s<>\\{\\}\\)\\]])"
    },
    "implicit-expression-accessor": {
      "match": "(?<=\\.)[_[:alpha:]][_[:alnum:]]*",
      "name": "variable.other.object.property.cs"
    },
    "implicit-expression-invocation": {
      "match": "(?<=\\.)[_[:alpha:]][_[:alnum:]]*(?=\\()",
      "name": "entity.name.function.cs"
    },
    "implicit-expression-operator": {
      "patterns": [
        {
          "include": "#implicit-expression-dot-operator"
        },
        {
          "include": "#implicit-expression-null-conditional-operator"
        },
        {
          "include": "#implicit-expression-null-forgiveness-operator"
        }
      ]
    },
    "implicit-expression-dot-operator": {
      "match": "(\\.)(?=[_[:alpha:]][_[:alnum:]]*)",
      "captures": {
        "1": {
          "name": "punctuation.accessor.cs"
        }
      }
    },
    "implicit-expression-null-conditional-operator": {
      "match": "(\\?)(?=[.\\[])",
      "captures": {
        "1": {
          "name": "keyword.operator.null-conditional.cs"
        }
      }
    },
    "implicit-expression-null-forgiveness-operator": {
      "match": "(\\!)(?=(?:\\.[_[:alpha:]][_[:alnum:]]*)|\\?|[\\[\\(])",
      "captures": {
        "1": {
          "name": "keyword.operator.logical.cs"
        }
      }
    },
    "balanced-parenthesis-csharp": {
      "begin": "(\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.parenthesis.open.cs"
        }
      },
      "name": "razor.test.balanced.parenthesis",
      "patterns": [
        {
          "include": "source.cs"
        }
      ],
      "end": "(\\))",
      "endCaptures": {
        "1": {
          "name": "punctuation.parenthesis.close.cs"
        }
      }
    },
    "balanced-brackets-csharp": {
      "begin": "(\\[)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.squarebracket.open.cs"
        }
      },
      "name": "razor.test.balanced.brackets",
      "patterns": [
        {
          "include": "source.cs"
        }
      ],
      "end": "(\\])",
      "endCaptures": {
        "1": {
          "name": "punctuation.squarebracket.close.cs"
        }
      }
    },
    "directives": {
      "patterns": [
        {
          "include": "#code-directive"
        },
        {
          "include": "#functions-directive"
        },
        {
          "include": "#page-directive"
        },
        {
          "include": "#addTagHelper-directive"
        },
        {
          "include": "#removeTagHelper-directive"
        },
        {
          "include": "#tagHelperPrefix-directive"
        },
        {
          "include": "#model-directive"
        },
        {
          "include": "#inherits-directive"
        },
        {
          "include": "#implements-directive"
        },
        {
          "include": "#namespace-directive"
        },
        {
          "include": "#inject-directive"
        },
        {
          "include": "#attribute-directive"
        },
        {
          "include": "#section-directive"
        },
        {
          "include": "#layout-directive"
        },
        {
          "include": "#using-directive"
        }
      ]
    },
    "code-directive": {
      "begin": "(@)(code)\\s*",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#transition"
            }
          ]
        },
        "2": {
          "name": "keyword.control.razor.directive.code"
        }
      },
      "patterns": [
        {
          "include": "#directive-codeblock"
        }
      ],
      "end": "(?<=})|\\s"
    },
    "functions-directive": {
      "begin": "(@)(functions)\\s*",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#transition"
            }
          ]
        },
        "2": {
          "name": "keyword.control.razor.directive.functions"
        }
      },
      "patterns": [
        {
          "include": "#directive-codeblock"
        }
      ],
      "end": "(?<=})|\\s"
    },
    "directive-codeblock": {
      "begin": "(\\{)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.razor.directive.codeblock.open"
        }
      },
      "name": "meta.structure.razor.directive.codeblock",
      "patterns": [
        {
          "include": "source.cs"
        }
      ],
      "end": "(\\})",
      "endCaptures": {
        "1": {
          "name": "keyword.control.razor.directive.codeblock.close"
        }
      }
    },
    "page-directive": {
      "name": "meta.directive.page.cshtml",
      "match": "(@)(page)\\s+([^$]+)?",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#transition"
            }
          ]
        },
        "2": {
          "name": "keyword.control.razor.directive.page"
        },
        "3": {
          "patterns": [
            {
              "include": "source.cs#string-literal"
            }
          ]
        }
      }
    },
    "addTagHelper-directive": {
      "name": "meta.directive.addTagHelper.razor",
      "match": "(@)(addTagHelper)\\s+([^$]+)?",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#transition"
            }
          ]
        },
        "2": {
          "name": "keyword.control.razor.directive.addTagHelper"
        },
        "3": {
          "patterns": [
            {
              "include": "#tagHelper-directive-argument"
            }
          ]
        }
      }
    },
    "removeTagHelper-directive": {
      "name": "meta.directive.removeTagHelper.razor",
      "match": "(@)(removeTagHelper)\\s+([^$]+)?",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#transition"
            }
          ]
        },
        "2": {
          "name": "keyword.control.razor.directive.removeTagHelper"
        },
        "3": {
          "patterns": [
            {
              "include": "#tagHelper-directive-argument"
            }
          ]
        }
      }
    },
    "tagHelperPrefix-directive": {
      "name": "meta.directive.tagHelperPrefix.razor",
      "match": "(@)(tagHelperPrefix)\\s+([^$]+)?",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#transition"
            }
          ]
        },
        "2": {
          "name": "keyword.control.razor.directive.tagHelperPrefix"
        },
        "3": {
          "patterns": [
            {
              "include": "#tagHelper-directive-argument"
            }
          ]
        }
      }
    },
    "tagHelper-directive-argument": {
      "patterns": [
        {
          "include": "source.cs#string-literal"
        },
        {
          "include": "#unquoted-string-argument"
        }
      ]
    },
    "unquoted-string-argument": {
      "name": "string.quoted.double.cs",
      "match": "[^$]+"
    },
    "model-directive": {
      "name": "meta.directive.model.cshtml",
      "match": "(@)(model)\\s+([^$]+)?",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#transition"
            }
          ]
        },
        "2": {
          "name": "keyword.control.razor.directive.model"
        },
        "3": {
          "patterns": [
            {
              "include": "source.cs#type"
            }
          ]
        }
      }
    },
    "inherits-directive": {
      "name": "meta.directive.inherits.cshtml",
      "match": "(@)(inherits)\\s+([^$]+)?",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#transition"
            }
          ]
        },
        "2": {
          "name": "keyword.control.razor.directive.inherits"
        },
        "3": {
          "patterns": [
            {
              "include": "source.cs#type"
            }
          ]
        }
      }
    },
    "implements-directive": {
      "name": "meta.directive.implements.razor",
      "match": "(@)(implements)\\s+([^$]+)?",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#transition"
            }
          ]
        },
        "2": {
          "name": "keyword.control.razor.directive.implements"
        },
        "3": {
          "patterns": [
            {
              "include": "source.cs#type"
            }
          ]
        }
      }
    },
    "layout-directive": {
      "name": "meta.directive.layout.razor",
      "match": "(@)(layout)\\s+([^$]+)?",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#transition"
            }
          ]
        },
        "2": {
          "name": "keyword.control.razor.directive.layout"
        },
        "3": {
          "patterns": [
            {
              "include": "source.cs#type"
            }
          ]
        }
      }
    },
    "namespace-directive": {
      "name": "meta.directive.namespace.razor",
      "match": "(@)(namespace)\\s+([^\\s]+)?",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#transition"
            }
          ]
        },
        "2": {
          "name": "keyword.control.razor.directive.namespace"
        },
        "3": {
          "patterns": [
            {
              "include": "#namespace-directive-argument"
            }
          ]
        }
      }
    },
    "namespace-directive-argument": {
      "match": "([_[:alpha:]][_[:alnum:]]*)(\\.)?",
      "captures": {
        "1": {
          "name": "entity.name.type.namespace.cs"
        },
        "2": {
          "name": "punctuation.accessor.cs"
        }
      }
    },
    "inject-directive": {
      "name": "meta.directive.inject.cshtml",
      "match": "(@)(inject)\\s*([\\S\\s]+?)?\\s*([_[:alpha:]][_[:alnum:]]*)?\\s*(?=$)",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#transition"
            }
          ]
        },
        "2": {
          "name": "keyword.control.razor.directive.inject"
        },
        "3": {
          "patterns": [
            {
              "include": "source.cs#type"
            }
          ]
        },
        "4": {
          "name": "entity.name.variable.property.cs"
        }
      }
    },
    "attribute-directive": {
      "name": "meta.directive.attribute.razor",
      "begin": "(@)(attribute)\\b",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#transition"
            }
          ]
        },
        "2": {
          "name": "keyword.control.razor.directive.attribute"
        }
      },
      "patterns": [
        {
          "include": "source.cs#attribute-section"
        }
      ],
      "end": "(?<=\\])|$"
    },
    "section-directive": {
      "name": "meta.directive.section.razor",
      "begin": "(@)(section)\\b\\s*([_[:alpha:]][_[:alnum:]]*)?",
      "beginCaptures": {
        "1": {
          "patterns": [
            {
              "include": "#transition"
            }
          ]
        },
        "2": {
          "name": "keyword.control.razor.directive.section"
        },
        "3": {
          "name": "variable.other.razor.directive.sectionName"
        }
      },
      "patterns": [
        {
          "include": "#directive-markupblock"
        }
      ],
      "end": "(?<=})"
    },
    "directive-markupblock": {
      "name": "meta.structure.razor.directive.markblock",
      "begin": "(\\{)",
      "beginCaptures": {
        "1": {
          "name": "keyword.control.razor.directive.codeblock.open"
        }
      },
      "patterns": [
        {
          "include": "$self"
        }
      ],
      "end": "(\\})",
      "endCaptures": {
        "1": {
          "name": "keyword.control.razor.directive.codeblock.close"
        }
      }
    },
    "using-directive": {
      "name": "meta.directive.using.cshtml",
      "match": "(@)(using)\\b\\s*(?!\\()(.+?)?(;)?$",
      "captures": {
        "1": {
          "patterns": [
            {
              "include": "#transition"
            }
          ]
        },
        "2": {
          "name": "keyword.other.using.cs"
        },
        "3": {
          "patterns": [
            {
              "include": "#using-static-directive"
            },
            {
              "include": "#using-alias-directive"
            },
            {
              "include": "#using-standard-directive"
            }
          ]
        },
        "4": {
          "name": "keyword.control.razor.optionalSemicolon"
        }
      }
    },
    "using-static-directive": {
      "match": "(static)\\b\\s+(.+)",
      "captures": {
        "1": {
          "name": "keyword.other.static.cs"
        },
        "2": {
          "patterns": [
            {
              "include": "source.cs#type"
            }
          ]
        }
      }
    },
    "using-alias-directive": {
      "match": "([_[:alpha:]][_[:alnum:]]*)\\b\\s*(=)\\s*(.+)\\s*",
      "captures": {
        "1": {
          "name": "entity.name.type.alias.cs"
        },
        "2": {
          "name": "keyword.operator.assignment.cs"
        },
        "3": {
          "patterns": [
            {
              "include": "source.cs#type"
            }
          ]
        }
      }
    },
    "using-standard-directive": {
      "match": "([_[:alpha:]][_[:alnum:]]*)\\s*",
      "captures": {
        "1": {
          "name": "entity.name.type.namespace.cs"
        }
      }
    },
    "await-prefix": {
      "name": "keyword.other.await.cs",
      "match": "(await)\\s+"
    }
  }
}
