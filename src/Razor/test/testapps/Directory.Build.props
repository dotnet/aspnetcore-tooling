<Project>
  <Import Project="Before.Directory.Build.props" Condition="Exists('Before.Directory.Build.props')" />

  <PropertyGroup>
    <SolutionRoot Condition="'$(SolutionRoot)' == ''">$(MSBuildThisFileDirectory)..\..\</SolutionRoot>
    <SolutionRoot>$([MSBuild]::EnsureTrailingSlash('$(SolutionRoot)'))</SolutionRoot>
    <RepositoryRoot>$(SolutionRoot)..\..\</RepositoryRoot>

    <!-- Retarget tests to use the copy of the Sdk from source -->
    <RazorSdkArtifactsDirectory>$(SolutionRoot)..\..\artifacts\bin\Microsoft.NET.Sdk.Razor\</RazorSdkArtifactsDirectory>

    <RazorSdkCurrentVersionProps>$(SolutionRoot)src\Microsoft.NET.Sdk.Razor\build\netstandard2.0\Sdk.Razor.CurrentVersion.props</RazorSdkCurrentVersionProps>
    <RazorSdkCurrentVersionTargets>$(SolutionRoot)src\Microsoft.NET.Sdk.Razor\build\netstandard2.0\Sdk.Razor.CurrentVersion.targets</RazorSdkCurrentVersionTargets>
  
    <!-- Necessary while testing with unreleased packages. -->
    <RestoreSources>
      $(RestoreSources);
      https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json;
      https://dotnetfeed.blob.core.windows.net/aspnet-extensions/index.json;
      https://api.nuget.org/v3/index.json;
    </RestoreSources>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Working around an issue in XDT transforms -->
    <AspNetCoreHostingModel>OutOfProcess</AspNetCoreHostingModel>
  </PropertyGroup>

  <!-- Don't use the server when building in place. This locks up rzc.dll -->
  <PropertyGroup Condition="'$(BinariesRoot)'==''">
    <UseRazorBuildServer>false</UseRazorBuildServer>
  </PropertyGroup>

  <ItemGroup>
    <!-- Have the SDK treat the MvcShim as an MVC assembly -->
    <_MvcAssemblyName Include="Microsoft.AspNetCore.Razor.Test.MvcShim.ClassLib" />
  </ItemGroup>

  <Import Project="After.Directory.Build.props" Condition="Exists('After.Directory.Build.props')" />

  <!--
    NOTE, BELOW

    These bits are a temporary workaround until we're able to get on the latest SDK which includes the latest Roslyn bits.
    Without them we can't properly publish testapps in a standalone fashion without investing in temporary infrastructure.
  -->
  <PropertyGroup>
    <MicrosoftNetCompilersToolsetPackageVersion>3.3.0-beta2-19365-06</MicrosoftNetCompilersToolsetPackageVersion>
    <RestoreSources Condition="'$(DotNetBuildOffline)' != 'true' ">
      $(RestoreSources);
      https://dotnet.myget.org/F/roslyn/api/v3/index.json;
    </RestoreSources>
  </PropertyGroup>
  
  <ItemGroup>
    <PackageReference Include="Microsoft.Net.Compilers.Toolset"
        Version="$(MicrosoftNetCompilersToolsetPackageVersion)"
        PrivateAssets="all"
        IsImplicitlyDefined="true" />
  </ItemGroup>


</Project>
