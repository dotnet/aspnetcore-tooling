<Project Sdk="Microsoft.NET.Sdk.Razor">
  
  <PropertyGroup>
    <RazorSdkDirectoryRoot>$(RazorSdkArtifactsDirectory)$(Configuration)\sdk-output\</RazorSdkDirectoryRoot>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>

    <_EnableAllInclusiveRazorSdk>true</_EnableAllInclusiveRazorSdk>
    <RazorLangVersion>3.0</RazorLangVersion>
    <RazorDefaultConfiguration>MVC-3.0</RazorDefaultConfiguration>
  </PropertyGroup>

  <PropertyGroup Condition="'$(RunningAsTest)' == ''">
    <!-- We don't want to run build server when not running as tests. -->
    <UseRazorBuildServer>false</UseRazorBuildServer>
  </PropertyGroup>

  <!-- DO NOT add addition references here. This is meant to simulate a non-MVC library -->
  <ItemGroup Condition="'$(BinariesRoot)'==''">
    <!-- In test scenarios $(BinariesRoot) is defined in a generated Directory.Build.props file -->
    <ProjectReference Include="..\..\Microsoft.AspNetCore.Razor.Test.ComponentShim\Microsoft.AspNetCore.Razor.Test.ComponentShim.csproj"/>
  </ItemGroup>

  <ItemGroup Condition="'$(BinariesRoot)'!=''">
    <Reference Include="$(BinariesRoot)\Microsoft.AspNetCore.Razor.Test.ComponentShim.dll"/>
  </ItemGroup>

  <!-- 
    BEGIN COMPONENT .cshtml WORKAROUND

    This is the current workaround used by the components codebase to treat .cshtml files as components
    so that we can have tooling support. Testing it here so it won't break.
  -->
  <ItemGroup>
    <RazorComponent Include="@(Content->WithMetadataValue('Extension', '.cshtml'))" />
  </ItemGroup>

  <Target Name="_RemoveFilesFromRazorGenerate" AfterTargets="ResolveRazorGenerateInputs">
    <ItemGroup>
      <RazorGenerate Remove="@(RazorGenerate)" />
    </ItemGroup>
  </Target>
  <!--
    END COMPONENT .cshtml WORKAROUND
  -->

  <!-- Test Placeholder -->

</Project>
